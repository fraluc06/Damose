name: Release

on:
  workflow_dispatch:
    inputs:
      version_number:
        description: 'Version number (es. 1.0.0)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Validate version format
      run: |
        if [[ ! "${{ inputs.version_number }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Invalid version format. Use semantic versioning: x.y.z (es. 1.0.0)"
          exit 1
        fi
        echo "✅ Version format validated: ${{ inputs.version_number }}"
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build project
      run: ./gradlew build
    
    - name: Create and push tag
      run: |
        TAG_NAME="v${{ inputs.version_number }}"
        echo "Creating tag: $TAG_NAME"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
        git push origin "$TAG_NAME"
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ inputs.version_number }}
        name: Release v${{ inputs.version_number }}
        body: |
          ## Release v${{ inputs.version_number }}
          
          ### Changes
          - Automated release build
          
          ### Download
          - `Damose-${{ inputs.version_number }}.jar` - Executable JAR with all dependencies
          
          ### How to run
          ```bash
          java -jar Damose-${{ inputs.version_number }}.jar
          ```
        files: |
          build/libs/Damose-1.0-SNAPSHOT.jar
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Rename JAR with version
      run: |
        cp build/libs/Damose-1.0-SNAPSHOT.jar build/libs/Damose-${{ inputs.version_number }}.jar
    
    - name: Upload versioned JAR to release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ inputs.version_number }}
        files: |
          build/libs/Damose-${{ inputs.version_number }}.jar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Release summary
      run: |
        echo "## 🎉 Release Completed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** v${{ inputs.version_number }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tag:** [v${{ inputs.version_number }}](https://github.com/${{ github.repository }}/releases/tag/v${{ inputs.version_number }})" >> $GITHUB_STEP_SUMMARY
        echo "**Download:** [Damose-${{ inputs.version_number }}.jar](https://github.com/${{ github.repository }}/releases/download/v${{ inputs.version_number }}/Damose-${{ inputs.version_number }}.jar)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Run the application:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "java -jar Damose-${{ inputs.version_number }}.jar" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY